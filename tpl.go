// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x81\xd6\xf7\xfa\x09\x92\x45\x91\xb8\x88\x17\xb5\xd1\xc0\x40\x16\x45\x41\x10\xd2\xd8\x22\x42\x93\x0e\x45\x59\x30\x58\xbe\x7b\xc1\x3f\x4b\x54\xe8\xd4\x2b\xf1\x9c\x33\x9f\x46\xa3\x91\x15\xf6\x72\x50\x0d\x42\xdd\x52\x4d\x5b\x79\x24\x27\x29\x98\x96\xaa\x86\xda\x18\x58\x6d\x5a\xb0\xb6\x06\x53\x01\x08\x7a\x42\xc8\x7f\x8f\x21\xb4\x75\x8e\xb5\x75\x05\xa0\xaf\xe7\x3b\xa1\xbd\x73\x42\xc8\x98\xff\x81\x1d\x60\xb5\xa7\xc7\x1e\xac\x75\x65\xee\x6a\x59\xf6\xcb\x18\x45\xc5\x11\x43\xd0\xda\xda\x98\x95\xb5\xf5\x7f\xc6\xa0\x68\xad\xfd\x1d\x49\x28\xda\x00\x39\x61\xdf\xd3\x23\xe6\x90\x87\x87\xf5\x6e\x5f\xb9\x06\x7e\x44\xdb\xda\xca\x49\x00\xd8\x37\x94\x53\xcd\xa4\x20\xa9\x74\x9e\xdf\x9d\x9d\xd5\xaf\xd6\xb7\xd8\x82\x50\x01\x7c\x0c\xa8\xae\xf0\x08\x2e\xff\xd3\x5f\xff\xf1\xd8\x33\x3e\x75\x54\xd1\x46\xa3\xf2\x4f\x18\x5b\x1d\x99\xee\x6e\xe0\xd0\x74\x9a\xc5\x56\x6a\x76\xb8\x6e\xe5\x33\xd5\x34\x38\xc2\x2b\x44\x48\xe2\x5e\x4d\x78\x1a\x3f\xed\x4f\xc9\x6c\x0a\x09\xf8\x8a\x01\xb0\x11\x1a\xd5\x85\xf2\xe0\xaa\xa8\x12\x96\xe4\x00\x2d\xa7\x8b\xe0\x70\xff\x6f\x43\xcb\x74\xd6\x28\xf5\xca\xbc\xc7\x59\xa6\x48\xda\xb3\x13\xca\x41\xbf\xc4\x1d\x08\x27\xd2\x45\x46\xee\x16\x01\x1b\xd1\xf0\xa1\xc5\x69\x8f\x58\x10\x88\xdf\xa7\x80\x99\x67\xbe\x1c\xd7\xc7\xc0\x14\x7e\x1f\x38\x7f\x63\xa2\x95\x63\x9a\x97\x97\xc9\x61\xe0\x9c\x8c\xc1\x48\x13\x2b\x16\x94\x47\x86\xe3\x8b\xec\xf5\x33\x72\x7a\x8d\x33\xc3\x91\x74\xb2\xd7\xa4\xf5\x5a\x9c\xda\xa7\x58\x91\xb6\xbe\x50\x3e\xf8\x85\x9c\x25\xf1\x26\x66\xc8\x62\x76\x46\x9d\xbf\x8d\x4e\x61\xdf\x49\xde\xce\x36\x33\x2c\xec\xd2\xd1\xd3\xd9\xfd\x31\x4c\x88\xdd\x7b\x08\x00\xc8\xf7\xd8\xc0\x24\x65\xcf\x32\xd5\xbc\x51\x25\x98\x38\x26\x79\x8c\xc7\x50\xbd\x30\xbf\x46\xbc\x62\x23\x2f\xee\x1b\xcc\x51\x44\x25\x3d\x63\x2e\xd3\x77\xd8\x4f\x8a\x69\xd6\xa4\x0f\x02\xa0\x49\xe7\x00\x5b\xda\xff\xa0\x2c\x6f\x9a\x68\xcb\x1e\xef\xe5\x33\x7c\x71\x41\x4a\x87\xca\x56\x7f\x03\x00\x00\xff\xff\x9e\x63\xc6\x89\xe8\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1512, mode: os.FileMode(420), modTime: time.Unix(1578638721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdb\x72\xdb\x38\x12\x7d\xf7\x57\xa0\xf4\xbc\x71\xbe\x20\x0f\x8e\x9d\x8b\xab\xec\x8d\xd7\x72\x9c\xdd\x9d\x9a\x62\xc1\x64\x8b\x42\x99\x24\x14\x00\x94\x2d\x6b\xf8\xef\x53\xb8\x37\x28\xde\x32\x35\xe3\x17\x0b\xe7\x34\x4e\xe3\xd2\x6c\xdc\x04\x48\xde\x8a\x1c\xc8\xaa\xa0\x8a\x16\xbc\xcc\x0a\x2a\xb7\x4f\x9c\x8a\x62\x45\x56\xc7\x23\x39\xbf\x2e\x48\xd7\xad\xc8\xf1\x8c\x10\xc5\x54\x05\xe4\x83\xc5\x1f\x4c\xa1\xeb\x56\x67\x84\x1c\x8f\xef\x08\xdb\x90\xf3\x7b\xa0\xc5\xb7\xa6\x3a\x90\xae\x3b\x23\x44\x00\x2d\x32\xae\x8b\x1f\x88\xae\x91\xb2\xba\x0e\x34\x45\x2c\x68\x81\xf5\x96\x0a\x70\x98\xb4\xbf\x6d\x5d\x4c\x0c\xd6\x7c\x80\x7a\x57\x51\x05\x8f\x54\x30\xfa\x54\x81\x8c\xf4\x0b\x53\xdb\x49\x03\x41\x9b\x12\xc8\xb9\x05\x94\xb3\xcb\xf6\xce\xd0\x74\x9d\x90\x86\xd6\xa0\xff\xbb\xee\xff\x5b\x17\x6d\xef\x09\xd9\x09\xd8\xb0\xd7\xc0\xdd\xd9\xa2\x67\x0b\xd8\xd0\xb6\x52\x9e\xbd\x72\x45\x3d\xaa\x67\x84\x0c\xf6\x68\xa8\x90\xf4\xe6\x07\x2b\x4a\x50\x63\x7d\x78\x31\xac\x6b\xb8\x3a\xec\xe2\xa4\xe9\xdf\xbe\x5d\xaf\x1e\xfd\x6f\x80\x0e\x1e\xfa\x5f\x80\xc2\x00\xbb\xf9\xb6\x9a\x27\x91\xf0\x00\xaf\x2a\xa9\x13\xba\xd0\x93\xb8\xa8\x58\xd9\x24\x3a\x19\x35\x10\x56\xf3\x46\xf3\x72\x6b\xf6\x96\xb6\x2a\x93\x1a\xc1\x62\xce\x64\x52\xeb\x2b\xb0\x72\xab\x3c\xba\xb5\x25\x27\x12\xb8\x49\x85\x1f\xac\x50\x5b\x0f\xbe\x98\x82\xab\xef\x99\xe9\xce\xd8\xf1\xb3\xfd\xd0\xbf\x7d\x0f\x16\x8c\xeb\x25\xaf\xb8\xf0\x60\x6e\x0a\xae\xb6\x67\x66\xc6\xb1\x06\x8c\xb9\xef\x05\xa1\x4a\xff\xb6\xd1\x44\x48\xc5\xf6\x90\xc9\x1d\x0d\x33\x76\xc3\xf6\xb0\xd6\x65\xef\xa7\x1b\xf3\x36\xe8\xbc\x82\x2b\xd8\x0c\xf9\x4f\x08\xc5\x2a\xc8\x0a\xd8\x84\x66\x78\x81\x47\xf6\xe6\x6d\x08\xd9\xb3\x37\xdf\x2a\x8b\xaf\x90\x35\xf2\x8e\xc6\xae\x95\x8a\xd7\xdf\x1b\xa6\x22\x97\x1b\x2c\x6b\x35\xe8\x07\x12\x9b\xcd\x8a\x5e\xb4\x8a\xcb\x9c\xc6\xef\x85\x10\x1a\x20\xa7\x88\x6d\x66\x05\x75\x14\x24\x1f\x8e\x0d\x92\xde\x97\x83\x8c\x66\x15\xef\xe1\x67\x0b\xd2\x67\x90\x74\xe8\x87\xb9\x24\xc3\xe8\x3f\x61\xcd\xc2\x8c\x44\xf1\xff\xb4\x20\x0e\xd1\x90\x90\x9f\xbe\x8d\x9e\x59\x25\x75\x92\x16\xa2\x5e\xdb\x6c\x15\xf0\xd1\x4c\x36\xa3\x63\x9c\xf6\xc5\x7e\x6a\x30\xc3\x92\xd8\x6c\x91\xee\x2d\x28\xc1\x72\xcc\xd4\x16\x71\x82\x81\x5f\xd6\x5b\x78\x55\x9f\x59\xa5\x40\x24\x7d\xd6\xd3\xbc\xb1\x30\x9a\xe7\x60\xb8\x48\xfa\x86\xd5\x38\xbe\xf5\x37\x5c\xc7\xd8\xf6\xec\x22\xa9\x8b\xb2\x14\x50\x52\xc5\x93\x56\xd2\x88\xfa\xf0\xc6\x76\x8b\x94\x2f\x79\xbd\xa3\x02\x1e\x38\x26\x73\x0b\x66\x8a\xc7\x94\x16\xcd\x96\xe9\x6e\x75\xe0\xf6\xa7\x3f\x37\x68\x32\xff\x89\xe1\x22\xe9\x6f\xa2\x00\xf1\x31\x89\x74\xae\xa1\xec\x29\x2c\xa4\xd1\x64\xb9\xe2\x15\x13\xa7\x92\x05\x13\x89\xa6\x35\x5a\x24\xfa\xe9\x55\x09\x7a\xc9\x2b\xcc\x81\xc6\xb2\x9c\x57\x5e\x14\x19\x2d\x12\xbd\x6e\x72\x01\x54\xc2\x17\xce\x13\x9e\x39\x3c\x2b\x35\xe1\xc4\x7b\xc6\x0b\xe3\xa1\x29\x98\x62\xbc\xa1\xd5\x67\x2e\x6a\x8a\xf3\x11\xce\x56\x03\x76\xef\x7a\x86\x27\xa9\x4b\x07\x56\xa8\x95\x6d\x4c\x35\x94\xc7\x46\x96\x56\x5f\x73\x74\x81\x1d\xed\x53\x14\xbc\xa3\x15\x28\x05\x29\xb9\x73\xa0\xdf\x3f\x06\x9b\xc5\xb2\xf6\xab\xe8\x7f\x96\xfe\xfb\xc1\x1f\x66\x62\xb9\x58\xff\xba\xd9\x83\x50\x29\xc7\x2c\x16\xa6\xd8\x59\x2c\xd6\x7c\xa4\x55\xdb\x1b\x88\xbd\x81\xfc\x0a\xee\xf8\xe5\x8d\xac\x69\x09\xdf\xef\x6f\x7a\xcd\xd4\x68\xd6\x8a\x10\xe9\xc8\x6c\x46\xba\x1b\x88\x53\x32\x17\xbb\x23\xe1\xbc\x56\x87\x0a\x86\x23\xf8\x84\x92\x06\x18\x8a\xc7\x7f\x28\x7c\xfa\xd9\x71\x66\xad\x9d\x51\x4b\xb6\xc2\xf6\x6f\x62\x43\x3c\x3e\xfa\xe4\xfd\x7b\x33\x12\x7f\x71\xc4\x1f\x68\x69\x97\xc9\x24\x71\x28\x5a\xba\xf5\x54\x92\x0f\xe4\xb7\xe3\xd1\x25\x87\x68\xdd\x75\xab\xe3\xf1\xbc\xeb\x56\xff\x3a\x1e\xa1\x29\xba\xee\xf7\x71\x6f\xba\x8d\x6e\x1f\x34\xb5\xe3\x9a\x07\x4c\x9e\xde\x43\x93\x64\xaf\x18\x22\x83\xd4\x49\x5a\x03\x6d\x85\xe2\x66\x74\xdb\xa5\x9b\x6d\x8c\x7b\x4d\x7a\x77\xd2\xc8\x61\xa4\xd7\xf0\x5b\x2a\x9e\x93\x61\x8e\x0d\x1f\xa4\x4e\x1a\x5e\x1b\xab\x81\x9d\xe4\xdf\xb5\x05\xbc\xa1\x4f\x90\xac\x7f\x95\x01\xfc\x0e\xc8\xb1\x8b\xa4\x4e\xd2\xd6\x4c\xd2\x1a\x8c\x99\xa1\xc1\x5f\x1c\x31\x5a\xc0\x9f\x87\xce\x06\xf8\x89\x23\x66\x72\x5c\xd6\x5b\xcb\xe4\xb4\x1c\x0d\x26\x0f\x8c\xf8\xb4\x84\x0f\x49\xc9\xf1\x68\xa4\xee\x9d\x80\x9c\x49\xc6\xc3\x49\x66\x17\x80\x78\x7b\x12\x2c\x66\x8f\xcc\xe9\x6d\xc2\x82\x23\xd1\x88\xd6\x67\xde\x24\x63\xb3\xe1\x4d\x3a\x36\xc8\x60\x52\xe8\xa2\x02\xa1\xae\xaf\x3c\x4c\x75\x31\x63\x61\x23\x14\xe9\x69\x95\x56\xf1\x7b\xd8\x08\x90\x21\x8f\xea\x03\x64\x26\x1c\x86\xce\x90\xd1\x6c\x52\xf1\x06\x4a\x84\x56\xb6\xe4\xc3\xdf\x73\x0b\x14\xf0\x20\x59\x95\x64\x98\x12\xa3\x49\xb9\xe4\x8c\x68\x0e\x63\xc3\xc9\x6a\x2c\x06\xe3\x32\x8f\x96\x76\xbc\xaa\x8f\x5d\x96\x6c\x21\x7f\x0e\x97\x25\xa6\x10\xf6\xff\x96\x99\xac\xfe\x45\xf0\x76\xc7\x9a\xd2\xe3\xa5\x2f\x3b\x11\xc4\xcf\xeb\x24\x22\x89\xc2\xfc\x9d\x4d\xfe\x7c\xc7\x65\xbc\x1d\xc9\x9f\xb3\x1d\x97\xf1\xde\xcb\xd3\xb3\x2a\x9f\x8a\x12\x12\x19\xd0\x00\xd2\x71\x06\xd3\xd7\x67\x0f\xb7\x61\x3a\xb6\xaa\x0e\xf3\xe1\xf0\xd9\x46\xe0\x06\x60\xdf\x73\x75\x3f\x96\x39\xde\xa0\x3f\x95\xc9\xe6\x3c\xb2\x93\x22\x66\x6d\xc5\x71\x6d\x92\x73\x12\xd6\xd8\x64\x52\x6b\xcd\xde\x50\x70\x48\x5b\x72\x22\x81\x9b\x54\xb8\xa5\xa2\x64\x21\xa5\xd5\xb6\xe4\x2f\x14\x3c\x37\xdd\x9f\x66\x1f\x7a\xd2\xec\x43\x17\x0c\x3a\xdd\x78\x10\x7b\x96\x83\xfb\x17\x3a\x61\x8b\x99\xfb\x1f\x7a\xd3\x37\x5e\x22\xed\x6e\xcd\x13\x5d\x73\xb1\x9e\x8a\x26\x97\xeb\xe3\x23\x0d\x8f\x20\xf0\x52\xa2\x67\x2c\xdb\x3b\x2c\x0e\x3a\x32\x9b\x4e\x70\xf4\xc0\x5b\xd5\xd3\xac\x0c\xd8\x57\xed\x9b\x4e\xcf\x68\x2b\xd5\x7a\xcb\x5f\xbe\xb2\x78\x84\xad\x5b\xa9\x32\xb9\xe5\x2f\xd9\x56\xa3\x7e\x7e\x53\xcb\x45\xaa\x9f\x84\xe0\x62\x40\x17\x2c\xde\x53\x0e\xd6\x8b\xb4\x6f\xa8\x82\x26\x3f\x9c\x8a\x57\x8e\xe8\xa9\x47\xfb\x45\xf2\x1f\x05\xd0\xe7\x82\xbf\x34\xa7\x0e\x9e\x02\xd5\x73\x81\xeb\x2c\x72\x72\xc5\xa4\x12\xec\xa9\x55\x68\x52\xa3\x9f\x02\xb3\x3d\x57\xbd\x9a\x8b\xbc\xdd\xbb\xf7\xb4\x1b\x26\xd5\xa9\x37\xff\xda\x96\x55\x9a\xee\xb9\xeb\x55\x9d\x74\x77\xc5\xe4\xae\xa2\x07\x7b\xdf\xe1\xc9\xc2\x82\xfe\x3a\xc3\x3f\x37\xf5\x4c\xe7\x5f\x12\xee\x04\x6c\x40\x40\x13\x53\x80\x49\xa3\xd9\x2e\xe2\xf8\xf6\x23\x31\x9f\x5e\x25\x58\x01\xff\x07\xc1\x2f\x79\xdb\xc4\x4f\x61\xcb\x0a\xc8\xde\x40\xf0\x2c\xb7\xb8\x5f\x3b\xfa\xd6\x33\x69\xb3\xa1\x25\xac\x15\x55\xad\xd4\xa3\x99\x3c\x57\xd5\x86\xcc\xa4\x61\xed\x54\x24\x2f\x58\x63\x95\x17\x7b\xc4\x4f\x60\x03\x1e\xed\xc3\x14\x7e\xd6\x19\xab\xfc\x6b\x1e\xf1\xa2\x35\xe4\x11\x2f\x61\x63\x95\x7f\xcd\x63\xb2\xdf\x1e\x72\x99\x6c\xbf\x47\xab\x4f\x1f\x11\xa8\xa0\xb5\xc4\xa8\x3d\x4a\xa6\xf8\xce\x96\xfa\xcf\x41\x6b\x8e\xaf\xa9\x24\x8f\x17\x54\x8e\x59\xf4\xd6\x12\xd1\xd1\xb7\xb8\x09\x05\x13\xb1\x11\x36\x61\x1d\x3f\x19\xcb\xcd\x8a\xac\x15\x4d\x7a\x62\x8a\xbe\x2b\x8e\x1b\x11\x19\x3d\x05\x0e\x7f\xf1\x6d\xdd\x48\xf4\xa5\x9b\xa2\x7d\x75\xf7\xe4\x1f\x04\x64\x4e\x77\x70\xb9\xa5\x82\xe6\xf8\x46\x65\x6c\x29\xe5\xa5\x84\xd0\xfa\xca\x96\xfc\xda\xe9\xb9\x81\x20\xd0\x27\x5b\xfb\x78\x3d\xf1\x10\xde\x9d\xfd\x19\x00\x00\xff\xff\xe2\x9c\x53\xdc\xb6\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8374, mode: os.FileMode(420), modTime: time.Unix(1578647304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc9\x6e\xdb\x3c\x10\xbe\xfb\x29\x06\x42\x0e\xff\x0f\xc4\x7e\x80\x02\x39\xa4\x09\x1c\x14\xe8\x92\x26\x41\x7a\x28\x0a\x83\x96\x46\x32\x51\x6a\x09\x45\x25\x71\x08\xbe\x7b\xc1\xe1\x26\xd9\x8a\x7b\xa8\x4f\x9c\x6f\xbe\x59\x39\x43\x4b\x62\xdf\x0e\x32\x47\xc8\x0a\xa6\x58\xd1\x56\x9b\x82\xf5\xbb\x6d\xcb\x64\x91\x41\xa6\x35\xac\x3e\x15\x60\x4c\x06\x7a\x01\xa0\xb8\x12\x08\xee\x77\xe1\xb4\x0f\x04\x19\x93\x2d\x00\x0a\xec\x73\xc9\x3b\xc5\xdb\x26\xa8\xaf\x47\x90\x23\x49\x64\xc5\xa6\x6d\xc4\x9e\x7c\x58\xce\x1d\xb2\xe2\x9b\x05\x96\xc6\x2c\x00\xb4\x7e\xe1\x6a\x07\xab\x1b\xc9\xba\x5d\x1f\x41\xc9\x9a\x0a\x61\x05\x24\x56\x56\x47\x29\x85\xa4\x66\xd2\x49\xae\xae\xb1\xe4\x0d\xa7\x24\x9c\x3b\x80\x67\xfe\x96\x8a\x78\xe4\x6f\x56\x11\x8c\x96\xc0\x4b\x58\x5d\x0e\xaa\xed\x73\x26\xd0\xaa\x58\x14\xbc\x49\xd2\x1a\x93\x59\x13\x6c\x0a\xef\x3a\x38\xb8\x95\x98\xf3\xde\x07\xed\xa2\xe0\x1d\x24\xed\xbb\x0e\x6e\x64\x3b\x74\xd4\x81\xca\x9e\xe0\x02\x7e\x6a\x7d\x56\x39\xf4\xc3\x45\x20\x18\x13\xba\x73\xc6\x9b\x02\x5f\xcf\xe1\x0c\x05\xd6\x07\x0c\x5e\x7a\xb5\x31\xe7\x5a\x53\xb0\x4c\x6b\x62\xd2\x89\x90\x5f\xf3\x89\xdc\xe7\x6d\x87\x94\x48\x6f\x4f\x3e\x91\xde\xa1\x36\x8c\x23\x9c\x4a\x24\x31\xfe\x29\x11\xb5\x77\xf7\x41\x68\x4f\x92\x9b\x02\x80\x8e\x09\x54\x0a\x27\xd3\x49\xfc\xd5\xad\xd7\x84\x1b\x8e\xdc\x4d\x29\x78\x37\xcb\x5d\x5b\x45\xe0\x9b\xf9\x64\xbe\x30\xf9\x1b\x25\xb5\xc5\x42\x6e\xd4\x26\xa0\x9f\x59\x6f\x57\x93\x2a\xe6\xab\xf6\x1d\xa6\x35\xb2\x42\xca\xef\x99\x89\x21\x8e\xda\x23\x09\x49\xa9\x35\x85\xff\xcc\xb6\x28\x6c\x1c\x41\x07\x4f\x76\xe8\xd1\x48\xa5\x12\x8e\x0f\xb1\x28\x57\xc1\x1d\x3e\x0d\xd8\xab\xd9\x12\xa4\xd3\xc5\x1a\x9e\x46\xbd\xfe\x3e\xa0\xdc\xa7\x35\x8a\x79\x52\x69\x4b\x63\xa8\xde\x83\x72\xb5\xb6\x29\x80\xf7\x1e\x4d\x2e\xab\x4a\x62\xc5\x54\x2b\x5d\x12\x16\x6c\x10\xb2\x0c\xfe\xbb\xc6\x3b\x2c\xef\x95\xe4\x4d\x35\xe6\xfd\x4f\x4b\x9a\xcc\xc2\x96\x26\x24\x46\x23\x87\x36\xea\xf2\x30\x6c\x9c\x2e\xad\x7d\x2f\x1c\x12\x79\xd3\x81\xb3\x76\xb4\xe7\x7e\xbc\xec\x96\xfb\x63\xd8\xf1\x34\x78\xd3\x6e\x27\xe3\x1f\xbc\x50\x3b\x6b\xfa\x42\x07\x6f\xe8\xd0\x13\x66\xa7\x9b\x3a\xb5\x19\x55\xe9\xcb\x0e\x8d\x88\x0a\x37\xd0\x57\x6d\x53\xd0\x2b\xc9\xc4\xba\x95\x35\x53\x3d\x8c\x47\xfb\x5d\x75\x78\x9a\x53\x43\xf3\x44\xdd\x94\xc4\x9d\x74\x0d\xc6\x6d\x3b\xdd\xb5\xe9\x7c\x58\xcf\x75\xc7\xe4\xf8\x8e\xaf\x12\x92\x66\x2f\x15\x15\xb6\x67\x7e\xa5\x8e\x03\xc4\x66\x0c\xbd\x6a\xeb\x8f\xd5\x55\x2b\xc8\x73\x4e\xf2\x66\x5b\x6d\x72\x42\x42\xf4\x03\xda\x5f\x3d\xae\x0f\x3d\x96\xb3\x1e\xd7\xef\x7b\x1c\x5f\x9b\x53\xcc\x9d\x16\x89\x7a\xbc\xe9\xf3\x92\xf1\x8f\xef\x18\x4b\xd7\xff\x80\x75\x27\x98\xc2\x47\x26\x39\xdb\x0a\x8c\x0f\xdf\xe8\x9f\xd9\x7e\x23\x78\xda\xe6\xd9\xf3\xfc\xcd\x37\xac\xc6\xd1\x6b\xf1\xd5\x8a\xe1\xbe\x3a\x89\x25\x7f\x85\xd1\x5f\xa3\x15\x83\xb6\xc0\x92\x0d\x42\xa5\x4f\x0a\x27\xda\x8f\x92\xd9\xa4\xcd\xe2\x4f\x00\x00\x00\xff\xff\x5f\x7f\xe5\x8e\xd5\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2261, mode: os.FileMode(420), modTime: time.Unix(1578647300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
